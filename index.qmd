---
title: "Data manipulation"
author: "Yann Say"
---
# Reading and writing data

## Create a dataframe
::: {.columns}

::: {.column width="45%"}
```{r}
r_df_example <- data.frame(id = letters[1:6],
numeric = 1:6)
r_df_example
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
import pandas as pd
import numpy as np
py_df_example = pd.DataFrame({'id': list('abcdef'),
                 'numeric': list(range(1, 7))
                })

py_df_example
```
:::

:::

## palmers 
::: {.columns}

::: {.column width="45%"}
```{r}
#| warning: false 
#| message: false

library(palmerpenguins)
library(dplyr)

r_df <- penguins

```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
import seaborn as sns
py_df = sns.load_dataset('penguins')

```
:::

:::

## write csv/xlsx
::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> 
  write.csv("penguins.csv")
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df.to_csv('penguins.csv')
```
:::

:::

## read csv/xlsx
::: {.columns}
::: {.column width="45%"}
```{r}
r_df_csv <- read.csv("penguins.csv")
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df_csv =	pd.read_csv("penguins.csv")
```
:::
:::

# Data Exploration

## Columns names
::: {.columns}

::: {.column width="45%"}
```{r}
names(r_df)
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}

py_df.columns
```
:::

:::

## dimensions

::: {.columns}

::: {.column width="45%"}
```{r}
dim(r_df)
```
```{r}
nrow(r_df)
```
```{r}
ncol(r_df)
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}

py_df.shape
```
```{python}

py_df.shape[0]
```
```{python}

py_df.shape[1]
```
:::

:::

## head
::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> head()
```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df.head()
```

:::
:::
## table | tally
::: {.columns}

::: {.column width="45%"}
```{r}
r_df$species |>  table()
```
```{r}
r_df |>  group_by(species) |>  tally()
```
```{r}
table(r_df$species,r_df$island)
```
```{r}
table(r_df$species,r_df$sex, useNA = "ifany")
```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df['species'].value_counts()

```
```{python}
pd.crosstab(py_df.species,py_df.island)
```
```{python}
pd.crosstab(py_df.species,py_df.sex,dropna = False)

```

:::
:::
## summary
::: {.columns}

::: {.column width="45%"}
```{r}

```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}

```

:::
:::

## structure / info
::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> str()
```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df.info()
```

:::
:::



# Data manipulation

## copy of dataframe

How to create 2 independent dataframes. In Python, if you `another_df = original_df`, each modification of `another_df` will be reflected in `original_df`. 

::: {.columns}
::: {.column width="45%"}
```{r}
another_r_df <- r_df
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
another_py_df = py_df.copy()
```
:::
:::

## filter

### Filter for given value
::: {.columns}

::: {.column width="45%"}
```{r}
penguins |> 
  filter(species == "Adelie")
```
```{r}
r_df[r_df$species == "Adelie",]
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df[py_df["species"] == "Adelie"]

```
:::
:::

### Filter for non missing value
::: {.columns}

::: {.column width="45%"}
```{r}
penguins |> 
  filter(!is.na(sex))
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df.dropna(subset= "sex")

```
:::
:::

## select
::: {.columns}

::: {.column width="45%"}
```{r}
r_df$species
```

```{r}
r_df[["species"]]
```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df.species
```


```{python}
py_df["species"]
```
```{python}
py_df.filter(["species"])
```

:::
:::


## filter & select
::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> 
  filter(species == "Adelie") |> 
  select("bill_length_mm")
```

```{r}
r_df[r_df$species == "Adelie", "bill_length_mm"]
```

:::

::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df.loc[py_df["species"] == "Adelie", "bill_length_mm"] 

```

:::
:::

::: {.columns}
::: {.column width="45%"}
```{r}
r_df[1,1]
```
```{r}
r_df[1:6, 1:6]
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df.iloc[0,0]
```
```{python}
py_df.iloc[:6,:6]
```

:::
:::

## mutate
::: {.columns}
::: {.column width="45%"}
```{r}
r_df_example["new_column"] <- "new value"
r_df_example
```
```{r}
r_df_example <- r_df_example |> 
  mutate(new_column2 = paste(id, numeric))
r_df_example
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df_example["new_column"] = list(range(6))
py_df_example
```

```{python}
py_df_example["new_column2"] = py_df_example.apply(lambda row: row["id"] + str(row["numeric"]), axis = 1)
py_df_example
```


:::
:::

## case_when
::: {.columns}
::: {.column width="45%"}
```{r}
r_df$island|>  unique(
  
)
```
```{r}
r_df <- r_df |>  
  mutate(xx = case_when(island == "Biscoe" ~ "case1", 
                        island == "Torgersen" ~ "case2",
                        TRUE ~ "case3"))

r_df[["xx"]]

```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
def my_case(x_):
  if x_ == "Biscoe":
    return "case1"
  if x_ == "Torgersen":
    return "case2"
  return "case3"
py_df["xx"] = py_df.apply(lambda row: my_case(row["island"]), axis = 1)

py_df.xx
```

:::
:::
## summarise

### One calculation

::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> 
  group_by(species) |> 
  summarise(bill_length_mm = mean(bill_length_mm, na.rm = T))
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df.groupby('species').bill_length_mm.mean()
```
:::
:::

### Two calculations: one variable, two functions

::: {.columns}

::: {.column width="45%"}
```{r}
r_df |> 
  group_by(species) |> 
  summarise(mean = mean(bill_length_mm, na.rm = T), 
            median = median(bill_length_mm, na.rm = T)) 
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df.groupby("species").bill_length_mm.agg([np.mean, np.median]).reset_index()
```
:::
:::

### Two calculations: two variable, one function

::: {.columns}
::: {.column width="45%"}
```{r}
r_df |> 
  group_by(species) |> 
  summarise(bill_length_mean = mean(bill_length_mm, na.rm = T),
            body_mass_mean = mean(body_mass_g, na.rm = T))
```


:::

::: {.column width="10%"}
:::
::: {.column width="45%"}


```{python}
py_df.groupby('species')[['bill_length_mm','body_mass_g']].mean().reset_index().rename(columns={"bill_length_mm":"bill_length_mean","body_mass_g":"body_mass_mean"})
```

:::
:::

## rename

::: {.columns}
::: {.column width="45%"}
```{r}
r_df |>
  rename(Species = species,
         Island = island)
```
```{r}
rename_r_df <- r_df[,c("species", "island")]
names(rename_r_df) <- c("Species", "Island")
names(rename_r_df)
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

```{python}
py_df_rename1 = py_df.copy()
py_df_rename1.rename(columns={'species': 'Species', 'island': 'Island'}, inplace=True)
py_df_rename1
```
```{python}
py_df_rename2 = py_df[["species","island"]].copy()
py_df_rename2.columns = ["Species", "Island"]
py_df_rename2.columns
```
:::
:::

## arrange

::: {.columns}
::: {.column width="45%"}
```{r}
r_df |> 
  arrange(species) |> 
  head()
```
```{r}
r_df |> 
  arrange(desc(species)) |> 
  head()
```

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df.sort_values(by = "species").head()
```
```{python}
py_df.sort_values(by = "species", ascending = False).head()
```
:::
:::
## joins

### left_join
::: {.columns}
::: {.column width="45%"}
```{r}

```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}

```
:::
:::

### right_join

### full_join

### inner_join

## pivot

### pivot_wider / pivot_table

### pivot_longer / merge


# control flows and loops

# function

::: {.columns}
::: {.column width="45%"}
```{r}
my_r_function <- function(number) {
  
  my_square = number * number
  return(my_square)
}

my_r_function(5)
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
def my_py_function(number):
  my_square = number * number
  return my_square

my_py_function(5)
```
:::
:::

## anonymous functions / lambda

# logics

## not

::: {.columns}
::: {.column width="45%"}
```{r}
!TRUE
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
not(True)
```
:::
:::

## Missing value
::: {.columns}
::: {.column width="45%"}
```{r}
is.na(r_df$bill_length_mm)
```

```{r}
sum(is.na(r_df$bill_length_mm) )
```

```{r}
sum(!is.na(r_df$bill_length_mm) )
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
py_df["bill_length_mm"].isnull()
```

```{python}
py_df["bill_length_mm"].isnull().sum()

```

```{python}
py_df["bill_length_mm"].notna().sum()

```
:::
:::

## in and not in

```{r}
### %in% 
### str_detect / grepl
###!%in%
```

```{python}
### in 
###not in
```


# Folders and files management

::: {.columns}
::: {.column width="45%"}
```{r}
list.files()	
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
import os
os.listdir()

```
:::
:::

## types
::: {.columns}
::: {.column width="45%"}
```{r}
typeof(r_df)
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{python}
type(py_df)
```
:::
:::